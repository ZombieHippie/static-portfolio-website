extend layout.extend

block head
  title Code Snippets
  meta(name="description" content="Code snippets of Cole Lawrence (ZombieHippie).")
  meta(name="keywords" content="code snippets,web development,portfolio,Cole Lawrence,ZombieHippie,AZombieHippie,Cole R Lawrence")
  link(href="css/post.css" rel="stylesheet")
  link(href="css/code.css" rel="stylesheet")
  link(href="lib/codemirror-5.0/codemirror.css" rel="stylesheet")

//-code = require("code-snippets.cson")
block body
  section
    center: h2 Code Snippets
    center: p A collection of my favorite snippets I've written for various projects.
  section
    h3 droppy
    p
      | Node.js dropbox alternative&nbsp;
      a(href="http://github.com/silverwind/droppy") silverwind/droppy
    .snippet
      h3.snippet-title.pr
        span.type Pull Request&nbsp;
          a(href="https://github.com/silverwind/droppy/pull/25") #25
        strong Adding Context Menus
      p This addition to the droppy projects was inevitable, and allowed us to implement more features such as edit, copy and paste, and rename without cluttering the user interface. The screenshots below show the feature as it was developed in the original pull request.
      center: img(src="images/code/droppy/pr25-context-menu-open.png" title="Screenshot of first context menu open with a semi-transparent black backdrop behind the context menu.")
      center: img(src="images/code/droppy/pr25-context-menu-button.png" title="Screenshot of context menu button visible.")
      strong: a(href="https://github.com/silverwind/droppy/blob/21b84702fa4602814802bd64b20f092b49ba076e/src/client.js#L1295-1304") client.js@21b84#L1295-1304
      pre.code.cm-s-default(data-type="text/x-c++src")=code.droppyentrymenuclient
    .snippet
      h3.snippet-title.pr
        span.type Pull Request&nbsp;
          a(href="https://github.com/silverwind/droppy/pull/26") #26
        strong Add Copy and Paste Feature
      center: img(src="images/code/droppy/pr26-copy-paste-context-menu.png" title="How copy and paste was made possible by a context menu.")
      strong: a(href="https://github.com/silverwind/droppy/blob/426f18686108bd9037afae050ce77b2e80ddb880/src/client.js#L1351-1377") client.js@426f1#L1351-1377
      pre.code.cm-s-default(data-type="text/javascript")=code.droppycpclient
      strong: a(href="https://github.com/silverwind/droppy/blob/741217d3dcc30f57aa7ef4c6c352b38116cbe80a/droppy.js#L436-471") droppy.js@74121#L43-471
      pre.code.cm-s-default(data-type="text/javascript")=code.droppycpserver
  section
    h3 Cpp-Algorithms
    p
      | I pride myself on eloquent coding, and what better language to prove eloquence than C++ algorithms?&nbsp;
      a(href="https://github.com/ZombieHippie/Cpp-Algorithms") ZombieHippie/Cpp-Algorithms
    .snippet
      h3.snippet-title.al
        span.type Algorithm
        strong: a(href="https://github.com/ZombieHippie/Cpp-Algorithms/blob/master/SinglyLinkedListInsertionSort") Singly Linked List Insertion Sort
      p I love this algorithm. It took around 4 hours to write (including the time taken to refractor), but for educational purposes, I did not follow the algorithms of any other Singly Linked List insertion sorts.
      strong: a(href="https://github.com/ZombieHippie/Cpp-Algorithms/blob/8c695/SinglyLinkedListInsertionSort/Asn4.cpp#L42-60") Asn4.cpp@8c695#L42-60
      pre.code.cm-s-default(data-type="text/x-c++src")=code.code1
      center: img(src="images/code/cpp-algorithms/Insertion-sort-example-300px.gif" title="Graphical example of insertion sort from wikipedia.")
      center: p
        | Graphical insertion sort algorithm example from Wikimedia.&nbsp;
        a(href="http://commons.wikimedia.org/wiki/File:Insertion-sort-example-300px.gif") src
      strong: a(href="https://github.com/ZombieHippie/Cpp-Algorithms/blob/8c695/SinglyLinkedListInsertionSort/Asn4.cpp#L136-194") Asn4.cpp@8c695#L136-194
      pre.code.cm-s-default(data-type="text/x-c++src")=code.code2
      p.
        This code is by far one of my favorite pieces of code, because each time something didn't work, I'd work that much harder to make sure my identfiers were more explicit. I don't find myself to be a great reader, but in many ways I use this to my advantage by writing code that is more expressive; easier to read and understand.
    br
    p For more great code snippets, you can checkout my&nbsp;
      a(href="https://gist.github.com/zombiehippie") gists on Github
      | , or some of these other Github repositories:
    ul
      li: a(href="https://github.com/ZombieHippie/Touch-Tabs-jQuery") ZombieHippie/Touch-Tabs-jQuery
      li: a(href="https://github.com/ZombieHippie/jade-to-static") ZombieHippie/jade-to-static
      li: a(href="https://github.com/ZombieHippie/diamond") ZombieHippie/diamond

block footer
  script(src="lib/codemirror-5.0/codemirror-runmode-standalone-compressed.js")
  script(src="lib/codemirror-5.0/codemirror-modes-compressed.js")
  script.
    var handleEachCodeBlock = function (element) {
      var code = element.innerText
      element.innerHTML = ""
      CodeMirror.runMode(code, element.dataset.type, element)
    }
    var codeBlocks = document.querySelectorAll("pre.code")
    for (var i = 0; i < codeBlocks.length; i++)
      handleEachCodeBlock(codeBlocks[i])